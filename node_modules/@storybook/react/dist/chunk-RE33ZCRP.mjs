import{global}from"@storybook/global";import React,{Component as ReactComponent,StrictMode,Fragment,useLayoutEffect,useRef}from"react";import ReactDOM,{version as reactDomVersion}from"react-dom";var{FRAMEWORK_OPTIONS}=global,nodes=new Map,render=(args,context)=>{let{id,component:Component}=context;if(!Component)throw new Error(`Unable to render story ${id} as the component annotation is missing from the default export`);return React.createElement(Component,{...args})},WithCallback=({callback,children})=>{let once=useRef();return useLayoutEffect(()=>{once.current!==callback&&(once.current=callback,callback())},[callback]),children},renderElement=async(node,el)=>{let root=await getReactRoot(el);return new Promise(resolve=>{root?root.render(React.createElement(WithCallback,{callback:()=>resolve(null)},node)):ReactDOM.render(node,el,()=>resolve(null))})},canUseNewReactRootApi=reactDomVersion&&(reactDomVersion.startsWith("18")||reactDomVersion.startsWith("0.0.0")),shouldUseNewRootApi=FRAMEWORK_OPTIONS?.legacyRootApi!==!0,isUsingNewReactRootApi=shouldUseNewRootApi&&canUseNewReactRootApi,unmountElement=el=>{let root=nodes.get(el);root&&isUsingNewReactRootApi?(root.unmount(),nodes.delete(el)):ReactDOM.unmountComponentAtNode(el)},getReactRoot=async el=>{if(!isUsingNewReactRootApi)return null;let root=nodes.get(el);return root||(root=(await import("react-dom/client")).default.createRoot(el),nodes.set(el,root)),root},ErrorBoundary=class extends ReactComponent{constructor(){super(...arguments);this.state={hasError:!1}}static getDerivedStateFromError(){return{hasError:!0}}componentDidMount(){let{hasError}=this.state,{showMain}=this.props;hasError||showMain()}componentDidCatch(err){let{showException}=this.props;showException(err)}render(){let{hasError}=this.state,{children}=this.props;return hasError?null:children}},Wrapper=FRAMEWORK_OPTIONS?.strictMode?StrictMode:Fragment;async function renderToCanvas({storyContext,unboundStoryFn,showMain,showException,forceRemount},canvasElement){let content=React.createElement(ErrorBoundary,{showMain,showException},React.createElement(unboundStoryFn,{...storyContext})),element=Wrapper?React.createElement(Wrapper,null,content):content;return forceRemount&&unmountElement(canvasElement),await renderElement(element,canvasElement),()=>unmountElement(canvasElement)}export{render,renderToCanvas};
